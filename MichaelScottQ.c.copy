#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define TRUE	1
#define FALSE	0

struct queueNode {
	int key;
	struct queueNode *next;
};

struct queueHeader {
	struct queueNode *head;
	struct queueNode *tail;
	pthread_mutex_t h_lock;
	pthread_mutex_t t_lock;
};

void *hwthread(void *arg);
void enqueue(struct queueHeader *qh, int key);
int* dequeue(struct queueHeader *qh);
int isEmpty(struct queueHeader *qh);

struct queueHeader Qheader = {NULL,};

int main(int argc, char* argv[]) {
	pthread_t p1, p2, p3, p4;

	pthread_create(&p1, NULL, hwthread, NULL);
	pthread_create(&p2, NULL, hwthread, NULL);
//	pthread_create(&p3, NULL, hwthread, NULL);
//	pthread_create(&p4, NULL, hwthread, NULL);

	pthread_join(p1, NULL);
	pthread_join(p2, NULL);
//	pthread_join(p3, NULL);
//	pthread_join(p4, NULL);

	if(!isEmpty(&Qheader))
		printf(" Q isn't empty\n");

	return 0;
}

void *hwthread(void *arg) {
	int i = 0;
	int *key = NULL;
	
	for (i = 0; i<1000000;i++){
		enqueue(&Qheader, i);
		key = dequeue(&Qheader);
		if (key) 
			free(key);
		else
			printf("queue empty");
	}

}

void enqueue(struct queueHeader *qh, int key) {
	struct queueNode *newNode = (struct queueNode *)malloc(sizeof(struct queueNode));
	struct timeval te;
	long long milliseconds;

	gettimeofday(&te, NULL);
	milliseconds = te.tv_usec;
	
	printf("%lld enqueue\n", milliseconds);
	newNode->key = key;
	newNode->next = NULL;
	
	pthread_mutex_lock(&qh->h_lock);
	if (!qh->head) {
		qh->head = newNode;
		pthread_mutex_unlock(&qh->h_lock);
	}
	else {
		pthread_mutex_unlock(&qh->h_lock);
		pthread_mutex_lock(&qh->t_lock);
		qh->tail->next = newNode;
		pthread_mutex_unlock(&qh->t_lock);
	}
	
	pthread_mutex_lock(&qh->t_lock);
	qh->tail = newNode;
	pthread_mutex_unlock(&qh->t_lock);
}

int* dequeue(struct queueHeader *qh) {
	struct queueNode *delNode = NULL;
	struct timeval te;
	long long milliseconds;
	
	gettimeofday(&te, NULL);
	milliseconds = te.tv_usec;
	
	printf("%lld dequeue\n", milliseconds);
	
	pthread_mutex_lock(&qh->h_lock);
	delNode = qh->head;
	pthread_mutex_unlock(&qh->h_lock);
	if (delNode) {
		int *returnval = (int *)malloc(sizeof(int));

		pthread_mutex_lock(&qh->h_lock);
		pthread_mutex_lock(&qh->t_lock);
		if (qh->head == qh->tail) {
			pthread_mutex_unlock(&qh->h_lock);
			qh->tail = NULL;
		}
		pthread_mutex_unlock(&qh->t_lock);

		pthread_mutex_lock(&qh->h_lock);
		*returnval = qh->head->key;
		qh->head = qh->head->next;
		pthread_mutex_unlock(&qh->h_lock);

		delNode->next = NULL;
		free(delNode);

		return returnval;
	}
	else
		return NULL;
}


int isEmpty(struct queueHeader *qh) {
	if (!qh->head && !qh->tail) 
		return TRUE;
	else
		return FALSE;
}
